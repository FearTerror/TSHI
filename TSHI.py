# import telebot
# from telebot import types
# import sqlite3
# import webbrowser
#
# import requests
# import wikipedia
#
# TOKEN = '7883357675:AAFFUWtWfaApXZJ17j0X_TtsDrbpYb6wfCI'
# bot = telebot.TeleBot(TOKEN)
#
# # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
# conn = sqlite3.connect('TSHI.db', check_same_thread=False)
# cursor = conn.cursor()
#
# # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ —ó—ó –Ω–µ —ñ—Å–Ω—É—î
# def check_and_create_table():
#     try:
#         cursor.execute("""
#             CREATE TABLE IF NOT EXISTS Product_list (
#                 id INTEGER PRIMARY KEY AUTOINCREMENT,
#                 Product_name TEXT NOT NULL,
#                 Type_Product TEXT NOT NULL
#             );
#         """)
#         conn.commit()
#     except sqlite3.Error as e:
#         print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ: {e}")
#
# # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
# def main_menu():
#     menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     menu.add(types.KeyboardButton("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤"))
#     menu.add(types.KeyboardButton("–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –Ω–∞ –º–∞–ø—ñ"))
#     menu.add(types.KeyboardButton("–ê–∫—Ü—ñ–π–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"))
#     menu.add(types.KeyboardButton("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫—Ü—ñ–π–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"))
#     menu.add(types.KeyboardButton("–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤"))
#     menu.add(types.KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–¥ —Ñ—Ä—É–∫—Ç—ñ–≤"))
#     return menu
#
# @bot.message_handler(func=lambda message: message.text == "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")
# def order(message):
#     menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     menu.add('–§—Ä—É–∫—Ç–∏', '–û–≤–æ—á—ñ', '–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏')
#     bot.send_message(message.chat.id, "–Ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏?", reply_markup=menu)

# @bot.message_handler(func=lambda message: message.text in ['–§—Ä—É–∫—Ç–∏', '–û–≤–æ—á—ñ', '–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏'])
# def show_products(message):
#     product_type = message.text
#     try:
#         cursor.execute("SELECT id, Product_name FROM Product_list WHERE Type_Product = ?", (product_type,))
#         products = cursor.fetchall()
#         if products:
#             response = f"–°–ø–∏—Å–æ–∫ {product_type.lower()}:\n" + "\n".join([f"{row[0]}. {row[1]}" for row in products])
#         else:
#             response = f"–£ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î {product_type.lower()}."
#         bot.send_message(message.chat.id, response, reply_markup=main_menu())
#     except sqlite3.Error as e:
#         bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
#
#
# @bot.message_handler(func=lambda message: message.text == "–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –Ω–∞ –º–∞–ø—ñ")
# def map(message):
#     try:
#         with open("map.jpg", "rb") as photo:
#             bot.send_photo(message.chat.id, photo, caption="–û—Å—å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤")
#     except FileNotFoundError:
#         bot.send_message(message.chat.id, "–§–∞–π–ª map.jpg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
#
# @bot.message_handler(func=lambda message: message.text == "–ê–∫—Ü—ñ–π–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó")
# def sale(message):
#     bot.send_message(message.chat.id, "–û—Å—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –Ω–∞ —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ:.")
#
#
# @bot.message_handler(func=lambda message: message.text == "–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫—Ü—ñ–π–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó")
# def sale_subs(message):
#     bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏:")
#     bot.register_next_step_handler(message, process_email)
#
# def process_email(message):
#     email = message.text
#     # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–±–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏
#     bot.send_message(message.chat.id, f"–ù–∞ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É {email} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
#     bot.send_message(message.chat.id, "–ü—ñ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É!", reply_markup=main_menu())
#
# @bot.message_handler(commands=['website'])
# def open_website(message):
#     bot.send_message(message.chat.id, "–í—ñ–¥–∫—Ä–∏–≤–∞—é –≤–µ–±—Å–∞–π—Ç...")
#     webbrowser.open('https://www.metro.ua/')  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ URL –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É
#
# @bot.message_handler(commands=['inform'])
# def inform(message):
#     keyboard = types.InlineKeyboardMarkup()
#     button = types.InlineKeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞", callback_data="send_cat")
#     keyboard.add(button)
#     bot.send_message(
#         message.chat.id,
#         "–¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –≤ —á–∞—Ç—ñ.",
#         reply_markup=keyboard
#     )
#
# @bot.callback_query_handler(func=lambda call: call.data == "send_cat")
# def send_cat(call):
#     try:
#         with open("cat.jpg", "rb") as photo:
#             bot.send_photo(call.message.chat.id, photo, caption="–û—Å—å –≤–∞—à –∫—ñ—Ç!")
#     except FileNotFoundError:
#         bot.send_message(call.message.chat.id, "–§–∞–π–ª cat.jpg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É.")
#
# @bot.message_handler(commands=['start'])
# def start(message):
#     bot.send_message(
#         message.chat.id,
#         "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–µ—Ä–≤—ñ—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤!\n/help - –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥\n–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:",
#         reply_markup=main_menu()
#     )
#
# @bot.message_handler(func=lambda message: message.text == '–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤')
# def register_prod(message):
#     menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     menu.add(types.KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))
#     bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É:", reply_markup=menu)
#     bot.register_next_step_handler(message, get_product_name)
#
# def get_product_name(message):
#     product_name = message.text
#
#     menu = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
#     menu.add('–û–≤–æ—á—ñ', '–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏', '–§—Ä—É–∫—Ç–∏')
#     bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É:", reply_markup=menu)
#     bot.register_next_step_handler(message, get_product_type, product_name)
#
# def get_product_type(message, product_name):
#     product_type = message.text
#     if product_type not in ['–û–≤–æ—á—ñ', '–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏', '–§—Ä—É–∫—Ç–∏']:
#         bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=main_menu())
#         return
#     try:
#         # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
#         cursor.execute("INSERT INTO Product_list (Product_name, Type_Product) VALUES (?, ?)", (product_name, product_type))
#         conn.commit()
#         bot.send_message(message.chat.id, f"–ü—Ä–æ–¥—É–∫—Ç '{product_name}' –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —è–∫ '{product_type}'.", reply_markup=main_menu())
#     except sqlite3.Error as e:
#         bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
#
# @bot.message_handler(func=lambda message: message.text == '–ü–µ—Ä–µ–≥–ª—è–¥ —Ñ—Ä—É–∫—Ç—ñ–≤')
# def view_fruits(message):
#     try:
#         cursor.execute("SELECT id, Product_name FROM Product_list WHERE Type_Product = ?", ('–§—Ä—É–∫—Ç–∏',))
#         fruits = cursor.fetchall()
#         if fruits:
#             response = "–°–ø–∏—Å–æ–∫ —Ñ—Ä—É–∫—Ç—ñ–≤:\n" + "\n".join([f"{row[0]}. {row[1]}" for row in fruits])
#         else:
#             response = "–§—Ä—É–∫—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."
#         bot.send_message(message.chat.id, response, reply_markup=main_menu())
#     except sqlite3.Error as e:
#         bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
#
# @bot.message_handler(func=lambda message: message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
# def return_to_main_menu(message):
#     bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=main_menu())
#
# @bot.message_handler(commands=['help'])
# def help_command(message):
#     bot.send_message(
#         message.chat.id,
#         "–û—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n/website - –°–∞–π—Ç –º–∞–≥–∞–∑–∏–Ω—É\n/inform - –¢–µ—Å—Ç–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó"
#     )
#
#
#
# # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
# if __name__ == "__main__":
#     check_and_create_table()
#     print("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞. –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É.")
#     bot.polling(none_stop=True)


import telebot
import easyocr
import cv2
import os


TOKEN = '8023381722:AAH0zVK7HNjmWaxX9KkogavDDxz4Asr7XLE'
bot = telebot.TeleBot(TOKEN)


reader = easyocr.Reader(['en', 'uk'])

def recognize_with_easyocr(image_path):
    image = cv2.imread(image_path)
    image = cv2.resize(image, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)
    results = reader.readtext(image)

    recognized_text = ""
    for (bbox, text, prob) in results:
        recognized_text += f"{text} (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prob:.2f})\n"
    return recognized_text if recognized_text else "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç."


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–Ω–æ–≥–æ –∑–Ω–∞–∫–∞, –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –µ–≥–æ —Ç–µ–∫—Å—Ç.")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:

        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)


        image_path = "temp_image.jpg"
        with open(image_path, 'wb') as new_file:
            new_file.write(downloaded_file)


        result_text = recognize_with_easyocr(image_path)


        bot.reply_to(message, f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{result_text}")


        os.remove(image_path)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.")


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling()





